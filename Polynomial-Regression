{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polynomial Regression and Logistic Regression Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*The dataset used here 'auto-mpg.data' that is available in the UCIMachine Learning Repository:*\n",
    "<br>\n",
    "*https://archive.ics.uci.edu/ml/datasets/Auto+MPG*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the dataset\n",
    "Try edit the import directory if you cannot import the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv('./auto-mpg.data', delim_whitespace=True, names=['mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', 'car_name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of the dataframe: (398, 9)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model_year</th>\n",
       "      <th>origin</th>\n",
       "      <th>car_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>307.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>3504.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>chevrolet chevelle malibu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15.0</td>\n",
       "      <td>8</td>\n",
       "      <td>350.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>3693.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>buick skylark 320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.0</td>\n",
       "      <td>8</td>\n",
       "      <td>318.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3436.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>plymouth satellite</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.0</td>\n",
       "      <td>8</td>\n",
       "      <td>304.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>3433.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>amc rebel sst</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.0</td>\n",
       "      <td>8</td>\n",
       "      <td>302.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>3449.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>ford torino</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mpg  cylinders  displacement horsepower  weight  acceleration  model_year  \\\n",
       "0  18.0          8         307.0      130.0  3504.0          12.0          70   \n",
       "1  15.0          8         350.0      165.0  3693.0          11.5          70   \n",
       "2  18.0          8         318.0      150.0  3436.0          11.0          70   \n",
       "3  16.0          8         304.0      150.0  3433.0          12.0          70   \n",
       "4  17.0          8         302.0      140.0  3449.0          10.5          70   \n",
       "\n",
       "   origin                   car_name  \n",
       "0       1  chevrolet chevelle malibu  \n",
       "1       1          buick skylark 320  \n",
       "2       1         plymouth satellite  \n",
       "3       1              amc rebel sst  \n",
       "4       1                ford torino  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Shape of the dataframe:\", df.shape) # Have a overlook on row# and col# of the dataset\n",
    "df.head(5)       # Display the first 5 rows of the dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the data\n",
    "This part works to drop some rows which have unsure values (?) in it.\n",
    "<br>\n",
    "**Notice:** do not compile this section twice，since some rows were already droped during the first compile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with '?' in the horsepower column\n",
    "df.drop(df[df['horsepower']=='?'].index,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert all values in the horsepower column from string to numeric type.\n",
    "df['horsepower'] = pd.to_numeric(df['horsepower'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training set and Testing set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Divide the dataset into independent variables a dependent/predicted variable, X and Y.\n",
    "<br>\n",
    "Split the dataset to training set and testing set. 70% for training set and 30% for testing set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_var = df[['mpg', 'cylinders', 'displacement', 'horsepower', 'acceleration', 'model_year', 'origin']]\n",
    "Y_var = df['weight']\n",
    "\n",
    "x_train,x_test,y_train,y_test = train_test_split(X_var, Y_var, test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using testing set to regress the dependent variable with 0~3 polynomial orders"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using testing set to regress 'weight' (dependent variable) on each of the 7 non-car_name features (independent variables) for the 0th to 3rd polynomial order of the independent variables.\n",
    "<br>\n",
    "&emsp;&emsp;**Note:** Because the results of predicted values are long lists of float numbers, so they are not printed out.\n",
    "<br>\n",
    "&emsp;&emsp;All results of predicted values are stored in lists named pred_0, pred_1, pred_2, and pred_3.\n",
    "<br>\n",
    "&emsp;&emsp;Instead, testing *mean squared errors (MSE)* for each variable and order are calculated individually.\n",
    ">**Discussion:** The output MSE are all large numbers. I think this perhaps because: \n",
    "<br>\n",
    "  1. Residual Error was not counted. \n",
    "<br>\n",
    "  2. Datapoints are too fragmented, we need a higher degree model to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Set\n",
      "    independent feature is:  mpg\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 198655.88276698504\n",
      "        order = 2, MSE = 138317.37604920467\n",
      "        order = 3, MSE = 136826.7918174994\n",
      "    independent feature is:  cylinders\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 141355.08447563095\n",
      "        order = 2, MSE = 140689.4067246952\n",
      "        order = 3, MSE = 135525.27910415642\n",
      "    independent feature is:  displacement\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 90507.8473447668\n",
      "        order = 2, MSE = 79049.85330920485\n",
      "        order = 3, MSE = 78834.92112068247\n",
      "    independent feature is:  horsepower\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 174465.49360626502\n",
      "        order = 2, MSE = 149806.00879212873\n",
      "        order = 3, MSE = 148899.3861260864\n",
      "    independent feature is:  acceleration\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 587281.5703445385\n",
      "        order = 2, MSE = 573726.8042421612\n",
      "        order = 3, MSE = 572898.5597244477\n",
      "    independent feature is:  model_year\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 616503.7646870244\n",
      "        order = 2, MSE = 616283.5292861732\n",
      "        order = 3, MSE = 606354.576226121\n",
      "    independent feature is:  origin\n",
      "        order = 0, MSE = 712025.203174375\n",
      "        order = 1, MSE = 487177.53125692165\n",
      "        order = 2, MSE = 462785.36957718054\n",
      "        order = 3, MSE = 21989762.86256594\n"
     ]
    }
   ],
   "source": [
    "print(\"Testing Set\")\n",
    "\n",
    "Y_test = np.array(y_test)\n",
    "\n",
    "for i in x_test:\n",
    "    X_test_i = np.array(x_test[i])\n",
    "    \n",
    "    print(\"    independent feature is: \", i)\n",
    "    \n",
    "    pred_0 = []\n",
    "    pred_1 = []\n",
    "    pred_2 = []\n",
    "    pred_3 = []\n",
    "    for j in range(len(X_test_i)):\n",
    "    \n",
    "        # order = 0\n",
    "        X = np.c_[np.ones(len(X_test_i))]\n",
    "        w_0 = X.T@Y_test@np.linalg.inv(X.T@X)\n",
    "        pred = w_0[0]\n",
    "        pred_0.append(pred)\n",
    "    \n",
    "        # order = 1\n",
    "        X = np.c_[np.ones(len(X_test_i)), X_test_i]\n",
    "        w_1 = X.T@Y_test@np.linalg.inv(X.T@X)\n",
    "        pred = w_1[0] + w_1[1]*X_test_i[j]\n",
    "        pred_1.append(pred)\n",
    "        \n",
    "        # order = 2\n",
    "        X = np.c_[np.ones(len(X_test_i)), X_test_i, np.square(X_test_i)]\n",
    "        w_2 = X.T@Y_test@np.linalg.inv(X.T@X)\n",
    "        pred = w_2[0] + w_2[1]*X_test_i[j] + w_2[2]*np.square(X_test_i[j])\n",
    "        pred_2.append(pred)\n",
    "        \n",
    "        # order = 3\n",
    "        X = np.c_[np.ones(len(X_test_i)), X_test_i, np.square(X_test_i), np.power(X_test_i, 3)]\n",
    "        w_3 = X.T@Y_test@np.linalg.inv(X.T@X)\n",
    "        pred = w_3[0] + w_3[1]*X_test_i[j] + w_3[2]*np.square(X_test_i[j]) + w_3[3]*np.power(X_test_i[j], 3)\n",
    "        pred_3.append(pred)\n",
    "    \n",
    "    sum_0 = 0\n",
    "    sum_1 = 0\n",
    "    sum_2 = 0\n",
    "    sum_3 = 0\n",
    "    for k in range(len(Y_test)):\n",
    "        sum_0 += (Y_test[k]-pred_0[k])**2\n",
    "        sum_1 += (Y_test[k]-pred_1[k])**2\n",
    "        sum_2 += (Y_test[k]-pred_2[k])**2\n",
    "        sum_3 += (Y_test[k]-pred_3[k])**2\n",
    "    mse_0 = sum_0/len(Y_test)\n",
    "    mse_1 = sum_1/len(Y_test)\n",
    "    mse_2 = sum_2/len(Y_test)\n",
    "    mse_3 = sum_3/len(Y_test)\n",
    "    \n",
    "    print(\"        order = 0, MSE =\", mse_0)\n",
    "    print(\"        order = 1, MSE =\", mse_1)\n",
    "    print(\"        order = 2, MSE =\", mse_2)\n",
    "    print(\"        order = 3, MSE =\", mse_3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot Polynomial Regression results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the lines and data for the testing set, one plot per variable.\n",
    "<br>\n",
    "Each graph contains a feature's datapoints, and four lines (Red-degree0;Yellow-degree1;Green-degree2;Blue-degree3).\n",
    ">**Discussion:** Orders form 0 to 2 are obviously underfitting to the test set. Therefore, order = 3 best fits the test set. \n",
    "<br>\n",
    "Higher order perhaps fit the test set even better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "\n",
    "for i in x_test:\n",
    "    # Plot datapoints on the graph.\n",
    "    x = np.array(x_test[i])\n",
    "    y = np.array(y_test)\n",
    "    plt.scatter(x, y)\n",
    "    \n",
    "    # order = 0\n",
    "    # Plot regression lines with degree 0.\n",
    "    X = np.c_[np.ones(len(x))]\n",
    "    w_0 = X.T@y@np.linalg.inv(X.T@X)\n",
    "    fx = x\n",
    "    fy = w_0[0]*X\n",
    "    plt.plot(fx, fy, 'r')\n",
    "\n",
    "    # order = 1\n",
    "    # Plot regression lines with degree 1.\n",
    "    X = np.c_[np.ones(len(x)), x]\n",
    "    w_1 = X.T@y@np.linalg.inv(X.T@X)\n",
    "    fx = np.linspace(math.floor(x.min()), math.ceil(x.max()), math.ceil(x.max())-math.floor(x.min()))\n",
    "    fy = w_1[0] + w_1[1]*fx\n",
    "    plt.plot(fx, fy, 'y')\n",
    "\n",
    "    # order = 2\n",
    "    # Plot regression lines with degree 2.\n",
    "    X = np.c_[np.ones(len(x)), x, np.square(x)]\n",
    "    w_2 = X.T@y@np.linalg.inv(X.T@X)\n",
    "    fx = np.linspace(math.floor(x.min()), math.ceil(x.max()), math.ceil(x.max())-math.floor(x.min()))\n",
    "    fy = w_2[0] + w_2[1]*fx + w_2[2]*np.square(fx)\n",
    "    plt.plot(fx, fy, 'g')\n",
    "\n",
    "    # order = 3\n",
    "    # Plot regression lines with degree 3.\n",
    "    X = np.c_[np.ones(len(x)), x, np.square(x), np.power(x, 3)]\n",
    "    w_3 = X.T@y@np.linalg.inv(X.T@X)\n",
    "    fx = np.linspace(math.floor(x.min()), math.ceil(x.max()), math.ceil(x.max())-math.floor(x.min()))\n",
    "    fy = w_3[0] + w_3[1]*fx + w_3[2]*np.square(fx) + w_3[3]*np.power(fx, 3)\n",
    "    plt.plot(fx, fy, 'b')\n",
    "    \n",
    "    # Show x label and y label.\n",
    "    plt.xlabel(i)\n",
    "    plt.ylabel('weight')\n",
    "    \n",
    "    # output the plotted graph containing datapoints and four lines with degrees from 0 to 3.\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Logistic Regression perform classification on the dependent variable "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the 1st order logistic regression to perform classification on the various classes (light/medium/heavy). One regression model per feature.\n",
    "<br>\n",
    "Then, import LinearRegression from sklearn. Build a logical regression model for each feature.\n",
    "<br>\n",
    "&emsp; Train the model with training set; test it with testing set.\n",
    "<br>\n",
    "The testing results of this logical regression model is not printed out because it is too long.\n",
    "<br>\n",
    "If you want to have a look at it, please print the y_pred variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Preprocess dataset\n",
    "Firstly, normalize the numeric weight to categories (light/medium/heavy).\n",
    "<br>\n",
    "&emsp;&emsp;Create a new feature column called 'weight_categ' append to the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @Siyuan Yao.\n",
    "\n",
    "min_wt = min(df['weight'])\n",
    "max_wt = max(df['weight'])\n",
    "per_bin = (max_wt - min_wt)/3\n",
    "\n",
    "bin1_start = min(df['weight'])\n",
    "bin1_end = bin1_start + per_bin\n",
    "bin2_end = bin1_end + per_bin\n",
    "\n",
    "def label_wt(row):\n",
    "    if bin1_start <= row['weight'] and row['weight'] <= bin1_end:\n",
    "        return 'light'\n",
    "    elif row['weight'] <= bin2_end:\n",
    "        return 'medium'\n",
    "    else:\n",
    "        return 'heavy'\n",
    "df['weight_categ'] = df.apply(lambda row: label_wt(row),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weight</th>\n",
       "      <th>weight_categ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3504.0</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3693.0</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3436.0</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   weight weight_categ\n",
       "0  3504.0       medium\n",
       "1  3693.0       medium\n",
       "2  3436.0       medium"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Have a look at the new feature 'weight_categ' append to the dataframe.\n",
    "df[['weight', 'weight_categ']].head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Split dataset into training & testing set\n",
    "Split the dataframe again, because the new dependent variable is 'weight_categ' now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataframe again\n",
    "# The new dependent variable is 'weight_categ' now.\n",
    "X_var = df[['mpg', 'cylinders', 'displacement', 'horsepower', 'acceleration', 'model_year', 'origin']]\n",
    "Y_var = df['weight_categ']\n",
    "x_train,x_test,y_train,y_test = train_test_split(X_var, Y_var, test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Using LogisticRegression to make prediction\n",
    "Import LinearRegression from sklearn. Build a logical regression model for each feature. Train the model with training set; test it with testing set.\n",
    "<br>\n",
    "&emsp;&emsp; The testing results of this logical regression model are not printed out because it is too long. Print the y_pred variable to have a look at it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import precision_score, recall_score\n",
    "\n",
    "# For each feature in test_set:\n",
    "for i in x_test:\n",
    "    log = LogisticRegression()\n",
    "    # Train the logical regression model.\n",
    "    log.fit(np.array(x_train[i]).reshape(-1, 1), y_train)\n",
    "    # Test the model.\n",
    "    y_pred = log.predict(np.array(x_test[i]).reshape(-1, 1))\n",
    "    \n",
    "    #print(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. A small predicted fragment\n",
    "Using the first three rows of the test set to show a comparison between real results and predicted results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model_year</th>\n",
       "      <th>origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>37.0</td>\n",
       "      <td>4</td>\n",
       "      <td>119.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>80</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>16.0</td>\n",
       "      <td>8</td>\n",
       "      <td>318.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>25.0</td>\n",
       "      <td>4</td>\n",
       "      <td>97.5</td>\n",
       "      <td>80.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      mpg  cylinders  displacement  horsepower  acceleration  model_year  \\\n",
       "320  37.0          4         119.0        92.0          15.0          80   \n",
       "188  16.0          8         318.0       150.0          13.0          76   \n",
       "58   25.0          4          97.5        80.0          17.0          72   \n",
       "\n",
       "     origin  \n",
       "320       3  \n",
       "188       1  \n",
       "58        1  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First three rows of the independent variables in the test set.\n",
    "x_test[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "320    light\n",
       "188    heavy\n",
       "58     light\n",
       "Name: weight_categ, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The real result according to the first three rows of the independent variables in the test set.\n",
    "y_test[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Independent variable is: mpg\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: cylinders\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: displacement\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: horsepower\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: acceleration\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: model_year\n",
      "Predicted value is: ['light' 'light' 'light']\n",
      "Independent variable is: origin\n",
      "Predicted value is: ['light' 'medium' 'medium']\n"
     ]
    }
   ],
   "source": [
    "# Predicted result respectively given by each of the independent variables in the test set\n",
    "for i in x_test:\n",
    "    y_pred_example = log.predict(np.array(x_test[i].iloc[0:3]).reshape(-1, 1))\n",
    "    \n",
    "    print(\"Independent variable is:\", i)\n",
    "    print(\"Predicted value is:\", y_pred_example)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation on testing set's classification performance\n",
    "Report the testing classification performance using both precision and recall.\n",
    ">**Discussion:** Both precision and recall are therefore based on relevance.\n",
    "<br>\n",
    "Therefore, a higher precision and recall score is more desirable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "independent feature is: mpg\n",
      "    precision score is: 0.7800293961284673\n",
      "    recall score is: 0.7321385902031063\n",
      "independent feature is: cylinders\n",
      "    precision score is: 0.844949494949495\n",
      "    recall score is: 0.853942652329749\n",
      "independent feature is: displacement\n",
      "    precision score is: 0.7755083081170038\n",
      "    recall score is: 0.7612504978096375\n",
      "independent feature is: horsepower\n",
      "    precision score is: 0.7716244476940736\n",
      "    recall score is: 0.7118677817602549\n",
      "independent feature is: acceleration\n",
      "    precision score is: 0.4529342723004695\n",
      "    recall score is: 0.40412186379928317\n",
      "independent feature is: model_year\n",
      "    precision score is: 0.35360623781676415\n",
      "    recall score is: 0.3264436479490243\n",
      "independent feature is: origin\n",
      "    precision score is: 0.38031886812374616\n",
      "    recall score is: 0.44695340501792113\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_score, recall_score\n",
    "\n",
    "# For each feature in test_set:\n",
    "for i in x_test:\n",
    "    log = LogisticRegression()\n",
    "    # Train the logical regression model.\n",
    "    log.fit(np.array(x_train[i]).reshape(-1, 1), y_train)\n",
    "     # Test the model.\n",
    "    y_pred = log.predict(np.array(x_test[i]).reshape(-1, 1))\n",
    "    \n",
    "    # Precision Score:\n",
    "    ps = precision_score(y_test,y_pred,average='macro',zero_division=0)\n",
    "    # Recall Score:\n",
    "    rs = recall_score(y_test,y_pred,average='macro',zero_division=0)\n",
    "    \n",
    "    print(\"independent feature is:\", i)\n",
    "    print(\"    precision score is:\", ps)\n",
    "    print(\"    recall score is:\", rs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Re-do the LogisticRegression training&testing with Min-max Normalization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Min-max normalization is applied to the train and test set this time.\n",
    ">**Discussion:** For some features, both of their precision and recall score increase or decrease together.\n",
    "<br>\n",
    "For some features, their precision and recall score just remain the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "independent feature is: mpg\n",
      "    precision score is: 0.4519774011299435\n",
      "    recall score is: 0.5795698924731183\n",
      "independent feature is: cylinders\n",
      "    precision score is: 0.4549808429118774\n",
      "    recall score is: 0.5851254480286738\n",
      "independent feature is: displacement\n",
      "    precision score is: 0.7460470924728583\n",
      "    recall score is: 0.673078454798885\n",
      "independent feature is: horsepower\n",
      "    precision score is: 0.688888888888889\n",
      "    recall score is: 0.5727598566308244\n",
      "independent feature is: acceleration\n",
      "    precision score is: 0.5924398625429553\n",
      "    recall score is: 0.3664675428116288\n",
      "independent feature is: model_year\n",
      "    precision score is: 0.2160039273441335\n",
      "    recall score is: 0.30448028673835126\n",
      "independent feature is: origin\n",
      "    precision score is: 0.38031886812374616\n",
      "    recall score is: 0.44695340501792113\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler() \n",
    "\n",
    "for i in x_test:\n",
    "    X_train = scaler.fit_transform(np.array(x_train[i]).reshape(-1, 1))\n",
    "    X_test = scaler.fit_transform(np.array(x_test[i]).reshape(-1, 1))\n",
    "    \n",
    "    log = LogisticRegression()\n",
    "    log.fit(X_train, y_train)\n",
    "    \n",
    "    y_pred = log.predict(X_test)\n",
    "    \n",
    "    ps = precision_score(y_test,y_pred,average='macro',zero_division=0)\n",
    "    rs = recall_score(y_test,y_pred,average='macro',zero_division=0)\n",
    "    \n",
    "    print(\"independent feature is:\", i)\n",
    "    print(\"    precision score is:\", ps)\n",
    "    print(\"    recall score is:\", rs)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
